Terminals which are not used

   INTEGER_LITERAL


State 0 conflicts: 2 shift/reduce
State 9 conflicts: 1 shift/reduce


Grammar

    0 $accept: s_expression $end

    1 s_expression: /* empty */
    2             | d_expression
    3             | s_expression d_expression

    4 d_expression: type_expression IDENT LEFT_PARENTHESIS l_expression RIGHT_PARENTHESIS SEMICOLON
    5             | type_expression IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS SEMICOLON

    6 l_expression: l_expression COMMA p_expression
    7             | p_expression

    8 p_expression: /* empty */
    9             | type_expression IDENT

   10 type_expression: TYPE_INT
   11                | TYPE_STRING


Terminals, with rules where they appear

$end (0) 0
error (256)
INTEGER_LITERAL (258)
IDENT (259) 4 5 9
TYPE_INT (260) 10
TYPE_STRING (261) 11
SEMICOLON (262) 4 5
COMMA (263) 6
LEFT_PARENTHESIS (264) 4 5
RIGHT_PARENTHESIS (265) 4 5


Nonterminals, with rules where they appear

$accept (11)
    on left: 0
s_expression (12)
    on left: 1 2 3, on right: 0 3
d_expression (13)
    on left: 4 5, on right: 2 3
l_expression (14)
    on left: 6 7, on right: 4 6
p_expression (15)
    on left: 8 9, on right: 6 7
type_expression (16)
    on left: 10 11, on right: 4 5 9


state 0

    0 $accept: . s_expression $end

    TYPE_INT     shift, and go to state 1
    TYPE_STRING  shift, and go to state 2

    TYPE_INT     [reduce using rule 1 (s_expression)]
    TYPE_STRING  [reduce using rule 1 (s_expression)]
    $default     reduce using rule 1 (s_expression)

    s_expression     go to state 3
    d_expression     go to state 4
    type_expression  go to state 5


state 1

   10 type_expression: TYPE_INT .

    $default  reduce using rule 10 (type_expression)


state 2

   11 type_expression: TYPE_STRING .

    $default  reduce using rule 11 (type_expression)


state 3

    0 $accept: s_expression . $end
    3 s_expression: s_expression . d_expression

    $end         shift, and go to state 6
    TYPE_INT     shift, and go to state 1
    TYPE_STRING  shift, and go to state 2

    d_expression     go to state 7
    type_expression  go to state 5


state 4

    2 s_expression: d_expression .

    $default  reduce using rule 2 (s_expression)


state 5

    4 d_expression: type_expression . IDENT LEFT_PARENTHESIS l_expression RIGHT_PARENTHESIS SEMICOLON
    5             | type_expression . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS SEMICOLON

    IDENT  shift, and go to state 8


state 6

    0 $accept: s_expression $end .

    $default  accept


state 7

    3 s_expression: s_expression d_expression .

    $default  reduce using rule 3 (s_expression)


state 8

    4 d_expression: type_expression IDENT . LEFT_PARENTHESIS l_expression RIGHT_PARENTHESIS SEMICOLON
    5             | type_expression IDENT . LEFT_PARENTHESIS RIGHT_PARENTHESIS SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 9


state 9

    4 d_expression: type_expression IDENT LEFT_PARENTHESIS . l_expression RIGHT_PARENTHESIS SEMICOLON
    5             | type_expression IDENT LEFT_PARENTHESIS . RIGHT_PARENTHESIS SEMICOLON

    TYPE_INT           shift, and go to state 1
    TYPE_STRING        shift, and go to state 2
    RIGHT_PARENTHESIS  shift, and go to state 10

    RIGHT_PARENTHESIS  [reduce using rule 8 (p_expression)]
    $default           reduce using rule 8 (p_expression)

    l_expression     go to state 11
    p_expression     go to state 12
    type_expression  go to state 13


state 10

    5 d_expression: type_expression IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS . SEMICOLON

    SEMICOLON  shift, and go to state 14


state 11

    4 d_expression: type_expression IDENT LEFT_PARENTHESIS l_expression . RIGHT_PARENTHESIS SEMICOLON
    6 l_expression: l_expression . COMMA p_expression

    COMMA              shift, and go to state 15
    RIGHT_PARENTHESIS  shift, and go to state 16


state 12

    7 l_expression: p_expression .

    $default  reduce using rule 7 (l_expression)


state 13

    9 p_expression: type_expression . IDENT

    IDENT  shift, and go to state 17


state 14

    5 d_expression: type_expression IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS SEMICOLON .

    $default  reduce using rule 5 (d_expression)


state 15

    6 l_expression: l_expression COMMA . p_expression

    TYPE_INT     shift, and go to state 1
    TYPE_STRING  shift, and go to state 2

    $default  reduce using rule 8 (p_expression)

    p_expression     go to state 18
    type_expression  go to state 13


state 16

    4 d_expression: type_expression IDENT LEFT_PARENTHESIS l_expression RIGHT_PARENTHESIS . SEMICOLON

    SEMICOLON  shift, and go to state 19


state 17

    9 p_expression: type_expression IDENT .

    $default  reduce using rule 9 (p_expression)


state 18

    6 l_expression: l_expression COMMA p_expression .

    $default  reduce using rule 6 (l_expression)


state 19

    4 d_expression: type_expression IDENT LEFT_PARENTHESIS l_expression RIGHT_PARENTHESIS SEMICOLON .

    $default  reduce using rule 4 (d_expression)
